var neo4j = require('neo4j');
function s4() {
  return Math.floor((1 + Math.random()) * 0x10000)
             .toString(16)
             .substring(1);
}
function guid() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
         s4() + '-' + s4() + s4() + s4();
}

var db = new neo4j.GraphDatabase('http://localhost:7474');


nodez=function(label,name,options) {
    this.lable=label
    this.name=name
    this.uuid=guid(),
    this.revision = 1
    this.creationDate = new Date().toISOString()
    this.lastModifiedDate = new Date().toISOString()
    for (o in options) {
        this[o]=options[o]
    }
}

exports["addAnyNode"]=function(data) {
    var nodes=[]
    var caseFile={}
    var stateMachine=[]
    stateMachine["Add any node"]=function(options) {
        data=new nodez()
        if(options) {
            for (o in options) {
                data[o]=options[o]
            }
        }
        var node = db.createNode(data);     // instantaneous, but...
        node.save(function (err, node) {    // ...this is what actually persists.
            if (err) {
                console.error('Error saving new node to database:', err);
                stateMachine["abend"]()
            } else {
                console.log('Node saved to database with id:', node.id);
                nodes.push(node.id)
                caseFile["adding"]=node.data
                stateMachine["Done adding"]()
            }
        })
    }
    stateMachine["Done adding"]=function() {
        console.log("Done adding")
        console.log(nodes)
        console.log(JSON.stringify(caseFile))
    }
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
    }
//  Set the machine running
    stateMachine["Add any node"](data)
}

exports["addTypedNode"]=function(type,data) {
    var nodes=[]
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
    }
    stateMachine["Done adding"]=function(node,typeNode) {
        console.log("Done adding")
        console.log(nodes)
        console.log(JSON.stringify(typeNode))
        node.createRelationshipTo(typeNode,"ISA",(function (err, rel) {   
            if (err) {
                console.error('Error creating relationship:', err);
                stateMachine["abend"]()
            } else {
                console.log('Relationship created:', rel);
            }
        }))
    }
    stateMachine["Add typed node"]=function(type,_data) {
        data=new nodez()
        if(_data) {
            for (o in _data) {
                data[o]=_data[o]
            }
        }
        data["type"]=type
        caseFile["Checking for types"]="Checking for types"
        // test for type existing = means going to get the data type="types' and name=type

        var query = [
          'MATCH (n)',
          'WHERE n.type="Types" AND n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:type
        }
        console.log("trying to find type master for "+type+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        db.query(query,params,function(err, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log(JSON.stringify(results.length))
                if (results.length==1) {
                    caseFile["Type node"]=results[0].n
                    console.log("preparing to save typed node:"+JSON.stringify(data))
                    var node = db.createNode(data);     // instantaneous, but...
                    node.save(function (err, node) {    // ...this is what actually persists.
                        if (err) {
                            console.error('Error saving new node to database:', err);
                            stateMachine["abend"]()
                        } else {
                            console.log('Node saved to database with id:', node.id);
                            nodes.push(node.id)
                            caseFile["adding"]=node.data
                            console.log("Now going for the linking relationship"+caseFile["Type node"])
                            stateMachine["Done adding"](node,caseFile["Type node"])
                        }
                    })
               }
                else {
                    stateMachine['abend']
                }
            }
        })
    }
/*
        var node = db.createNode(data);     // instantaneous, but...
        node.save(function (err, node) {    // ...this is what actually persists.
            if (err) {
                console.error('Error saving new node to database:', err);  //err?
                stateMachine["abend"]()
            } else {
                console.log('Node saved to database with id:', node.id);
                nodes.push(node.id)
                caseFile["step1"]=node.data
                stateMachine["Done adding"]()
            }
        })
    }
*/
//  Set the machine running
    stateMachine["Add typed node"](type,data)
}

exports["deleteAll"]=function(_CB_) {
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
    }
    stateMachine["delete all"]=function() {
        var query = [
          'MATCH (n)',
          'OPTIONAL MATCH (n) -[r]-> (m)',
          'DELETE n,r'
        ].join('\n');
        console.log("trying to delete")
        db.query(query,{},function(err, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log("deleted")
                caseFile["deleted"]=true
                console.log(JSON.stringify(results))
                if (_CB_) {
                    _CB_(caseFile)
                }
            }
        })
    }
//  Set the machine running
    stateMachine["delete all"](_CB_)
}


exports["addLegalRelationship"]=function(fromNode,name,toNode,template) {
    var nodes=[]
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
    }
    stateMachine["Add legal relationship"]=function (fromNode,name,toNode,template){
        caseFile["fromName"]=fromNode
        caseFile["toName"]=toNode
        caseFile["rel"]=name
        if (template) {
            caseFile["template"]=template
        }
        console.log(JSON.stringify(caseFile))
        console.log(caseFile["template"])
        stateMachine["getFromNode"]()
        // 1. get from node
        // 2. get to node
        // 3. establish relationship
    }
    stateMachine["getFromNode"]=function() {
        var query = [
          'MATCH (n)',
          'WHERE n.type="Types" AND n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:caseFile["fromName"]
        }
        console.log("trying to find type master for "+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        db.query(query,params,function(err, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log(JSON.stringify(results.length))
                if (results.length==1) {
                    caseFile["fromNode"]=results[0].n
                    stateMachine["getToNode"]()
                }
            }
        })
    }
    stateMachine["getToNode"]=function() {
        var query = [
          'MATCH (n)',
          'WHERE n.type="Types" AND n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:caseFile["toName"]
        }
        console.log("trying to find type master for "+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        db.query(query,params,function(err, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log(JSON.stringify(results.length))
                if (results.length==1) {
                    caseFile["toNode"]=results[0].n
                    stateMachine["setLegalRelationship"]()
                }
            }
        })
    }
    stateMachine["setLegalRelationship"]=function() {
        caseFile["fromNode"].createRelationshipTo(caseFile["toNode"],caseFile["rel"],{type:"Types"},(function (err, rel) {   
            if (err) {
                console.error('Error creating relationship:', err);
                stateMachine["abend"]()
            } else {
                console.log('Relationship created:', rel);
            }
        }))
    }
    //  set the stateMachine running
    stateMachine["Add legal relationship"](fromNode,name,toNode,template)
}
exports["addTypedRelationship"]=function(fromType,fromNode,name,toType,toNode,rdata) {
    var nodes=[]
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
    }
    stateMachine["Add typed relationship"]=function (fromType,fromNode,name,toType,toNode,rdata){
        caseFile["fromType"]=fromType
        caseFile["fromName"]=fromNode
        caseFile["toType"]=toType
        caseFile["toName"]=toNode
        caseFile["rel"]=name
//set up relationship data here
        console.log(JSON.stringify(caseFile))
        stateMachine["getFromNode"]()
        // 1. get from node
        // 2. get to node
        // 3. establish relationship
    }
    stateMachine["getFromNode"]=function() {
        var query = [
          'MATCH (n)',
          'WHERE n.type={type} AND n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            type:caseFile["fromType"],
            name:caseFile["fromName"]
        }
        console.log("trying to find node "+params.type+":"+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        db.query(query,params,function(err, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log(JSON.stringify(results.length))
                if (results.length==1) {
                    caseFile["fromNode"]=results[0].n
                    stateMachine["getToNode"]()
                }
            }
        })
    }
    stateMachine["getToNode"]=function() {
        var query = [
          'MATCH (n)',
          'WHERE n.type={type} AND n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            type:caseFile["toType"],
            name:caseFile["toName"]
        }
        console.log("trying to find node "+params.type+":"+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        db.query(query,params,function(err, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log(JSON.stringify(results.length))
                if (results.length==1) {
                    caseFile["toNode"]=results[0].n
                    stateMachine["testForLegalRelationship"]()
                }
            }
        })
    }
    stateMachine["testForLegalRelationship"]=function() {
        var query = [
          'MATCH (n)-[r:'+caseFile["rel"]+']->(m)',
          'WHERE n.type="Types" AND n.name= {fromType} ',  //'+'"'+type+'"'
          'AND m.type="Types" AND m.name= {toType} ',  //'+'"'+type+'"'
          'RETURN r'
        ].join('\n');
        var params = {
            fromType:caseFile["fromType"],
            toType:caseFile["toType"],
        }
        console.log(" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        db.query(query,params,function(err, results) {
            console.log(JSON.stringify(err),JSON.stringify(results))
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log(JSON.stringify(results.length))
                if (results.length==1) {
                    caseFile["legalRelationship"]=results[0].n
                    stateMachine["setTypedRelationship"]()
                }
            }
        })
///!!!!
    }
    stateMachine["setTypedRelationship"]=function() {
        caseFile["fromNode"].createRelationshipTo(caseFile["toNode"],caseFile["rel"],(function (err, rel) {   
            if (err) {
                console.error('Error creating relationship:', err);
                stateMachine["abend"]()
            } else {
                console.log('Relationship created:', rel);
            }
        }))
    }
    stateMachine["setLegalRelationship"]=function() {
        caseFile["fromNode"].createRelationshipTo(caseFile["toNode"],caseFile["rel"],{type:"Types"},(function (err, rel) {   
            if (err) {
                console.error('Error creating relationship:', err);
                stateMachine["abend"]()
            } else {
                console.log('Relationship created:', rel);
            }
        }))
    }
    //  set the stateMachine running
    stateMachine["Add typed relationship"](fromType,fromNode,name,toType,toNode,rdata)
}