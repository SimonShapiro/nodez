//var neo4j = require('neo4j');
function s4() {
  return Math.floor((1 + Math.random()) * 0x10000)
             .toString(16)
             .substring(1);
}
function guid() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
         s4() + '-' + s4() + s4() + s4();
}

//var db = new neo4j.GraphDatabase('http://localhost:7474');

createNodeData = function( data, template ) {
  var node_data_object = {},  tt,   o;
  if (data.hasOwnProperty( "name" )) {
    node_data_object.name = data.name
  }
  else {
    node_data_object.name = "unnamed"
  }
  node_data_object.uuid = guid();
  node_data_object.revision = 1;
  node_data_object.creationDate = new Date().toISOString();
  node_data_object.lastModifiedDate = new Date().toISOString();
  if (template) {
    console.log("TEMPLATE");
    console.log(template,typeof template);
    t=JSON.parse(template);
    for (tt in t) {
      // this could be a good place for default
      node_data_object[tt]=t[tt].type
    }
  }
  for (o in data) {
    if ( o == "schema" ) {
      node_data_object.schema = JSON.stringify( data.schema )
    }
    else {
      node_data_object[o]=data[o]
    }
  }
  return node_data_object
};

Neo4jconnection=function (DBROUTE) {
    this.createNode=function(nodeProps,_CB_) {
        options={
            url:DBROUTE+"/db/data/node",
            method:"POST",
            headers:{'content-type':'application/json'},
            body:JSON.stringify(nodeProps)
            }
        console.log("Calling Neo4j broker with:"+JSON.stringify(options))
        var request = require('request');
        request(options,_CB_)
    }
    this.setLabel=function(label,id,_CB_) {
        options={
            url:id,
            method:"POST",
            headers:{'content-type':'application/json'},
            body:JSON.stringify(label)
            }
        console.log("Calling Neo4j broker with:"+JSON.stringify(options))
        var request = require('request');
        request(options,_CB_)
    }
   this.cypherQuery=function(query,params,_CB_) {
        options={
            url:DBROUTE+"/db/data/cypher",
            method:"POST",
            headers:{'content-type':'application/json'},
            body:JSON.stringify({"query":query,"params":params})
            }
        console.log("Calling Neo4j broker with:"+JSON.stringify(options))
        var request = require('request');
        request(options,_CB_)
    }
   this.createRelationship=function(fromNodeREST,rel,toNode,_CB_) {
        options={
            url:fromNodeREST,
            method:"POST",
            headers:{'content-type':'application/json'},
            body:JSON.stringify({"to":toNode,"type":rel})
            }
        console.log("Calling Neo4j broker with:"+JSON.stringify(options))
        var request = require('request');
        request(options,_CB_)
    }
}

//var ndb = new Neo4jconnection('http://54.243.42.242:7474')
  var ndb = new Neo4jconnection('http://localhost:7474')

exports["addMetaNode"] = function(data,_CB_) {
    var caseFile = {};
    var stateMachine=[];
    var neo4j_data;
    stateMachine["Add metaNode"]=function(data,_CB_) {
        neo4j_data= createNodeData(data);
        ndb.createNode(neo4j_data,function (err, response, node) {    // ...this is what actually persists.
            if (err) {
                console.error('Error reported from Neo4J:', err);
                stateMachine["abend"]()
            } else {
                if (response.statusCode=201) {
                    n=JSON.parse(node)
                    console.log('Node saved to database with id:', n.self);
                    caseFile["adding"]=n
                    stateMachine["Set 'meta' label"](n)
                }
                else {
                    console.error('Error saving node:', err);
                    stateMachine["abend"]()
                }
            }
        })
    }
    stateMachine["Set 'meta' label"]=function(n) {
        ndb.setLabel('Meta',n.labels,function(err,response,data) {
            if (err) {
                console.error('Error reported from Neo4J:', err);
                stateMachine["abend"]()
            } else {
                if (response.statusCode=204) {
                    console.log("Label 'Meta' added to node: "+n.self);
                    caseFile["adding label meta"]=n.self
                    stateMachine["Done adding"]()
                }
                else {
                    console.error('Error saving node:', err);
                    stateMachine["abend"]()
                }
            }
        })
    }
    stateMachine["Done adding"]=function() {
        console.log("Done adding")
        console.log(JSON.stringify(caseFile))
        if(_CB_) {
            _CB_(null,caseFile)
        }
    }
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
        if(_CB_) {
            _CB_(500,caseFile)
        }
    }
//  Set the machine running
    stateMachine["Add metaNode"](data,_CB_)
}

exports["addTypedNode"]=function(node,_CB_) {
    var nodes=[]
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
        if (_CB_) {
            _CB_(500,caseFile)
        }
    }
    stateMachine["Add typed node"]=function(node,_CB_) {
        caseFile["Checking for types"]="Checking for types"
        // test for type existing = means going to get the data type="types' and name=type

        var query = [
          'MATCH (n:Meta)',
          'WHERE n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:node.type
        }
        console.log("trying to find type master for "+node.type+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        ndb.cypherQuery(query,params,function(err, status, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                r=JSON.parse(results)
                console.log(r.data.length,"x",r.data[0].length)
                if (r.data.length==1) {
                  // ned to consider the possiblility that there is no schema
                    data = createNodeData(node.data,r.data[0][0].data.schema)
                    console.log(JSON.stringify(data))
                    caseFile["Type node"]=node.type
                    stateMachine["Save node"](data)
               }
                else {
                    stateMachine['abend']
                }
            }
        })
    }
    stateMachine["Save node"]=function(data) {
        console.log("preparing to save typed node:"+JSON.stringify(data))
        ndb.createNode(data,function (err, results, node) {    // ...this is what actually persists.
            if (err) {
                console.error('Error saving new node to database:', err);
                stateMachine["abend"]()
            } else {
                n=JSON.parse(node)
                console.log('Node saved to database with id:', n.self);
                caseFile["adding"]=n
                console.log("Now going for the linking relationship"+caseFile["Type node"])
                stateMachine["Set label"](n,caseFile["Type node"])
            }
        })

    }
    stateMachine["Set label"]=function(n,type) {
        console.log("setting label on",n.data,type)
        console.log("---------------")
        console.log(JSON.stringify(caseFile))
        ndb.setLabel(type,n.labels,function(err,response,data) {
            if (err) {
                console.error('Error reported from Neo4J:', err);
                stateMachine["abend"]()
            } else {
                if (response.statusCode=204) {
                    console.log("Label 'Meta' added to node: "+n.self);
                    caseFile["adding label meta"]=n.self
                    stateMachine["Done adding"]()
                }
                else {
                    console.error('Error saving node:', err);
                    stateMachine["abend"]()
                }
            }
        })
    }
    stateMachine["Done adding"]=function() {
        console.log("Done adding")
        console.log(nodes)
        console.log(JSON.stringify(node.type))
        if (_CB_) {
            _CB_(null,caseFile)
        }
    }
/*
        var node = db.createNode(data);     // instantaneous, but...
        node.save(function (err, node) {    // ...this is what actually persists.
            if (err) {
                console.error('Error saving new node to database:', err);  //err?
                stateMachine["abend"]()
            } else {
                console.log('Node saved to database with id:', node.id);
                nodes.push(node.id)
                caseFile["step1"]=node.data
                stateMachine["Done adding"]()
            }
        })
    }
*/
//  Set the machine running
    stateMachine["Add typed node"](node,_CB_)
}

exports["deleteAll"]=function(_CB_) {
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
    }
    stateMachine["delete all"]=function() {
        var query = [
          'MATCH (n)',
          'OPTIONAL MATCH (n) -[r]-> (m)',
          'DELETE n,r'
        ].join('\n');
        console.log("trying to delete")
        ndb.cypherQuery(query,{},function(err, status, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log("deleted")
                caseFile["deleted"]=true
                console.log(results)
                if (_CB_) {
                    console.log("Calling done and deleted")
                    _CB_(null,caseFile)
                }
            }
        })
    }
//  Set the machine running
    stateMachine["delete all"](_CB_)
}


exports["addLegalRelationship"]=function(rel,_CB_) {
    var nodes=[]
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function() {
        console.log("!!ABNORMAL END!!")
        if(_CB_) {
            _CB_(500,caseFile)
        }
    }
    stateMachine["Add legal relationship"]=function (){
        caseFile["fromName"]=rel.from
        caseFile["toName"]=rel.to
        caseFile["rel"]=rel.rel
        if (rel.template) {
            caseFile["template"]=rel.template
        }
        console.log(JSON.stringify(caseFile))
        console.log(caseFile["template"])
        stateMachine["getFromNode"]()
        // 1. get from node
        // 2. get to node
        // 3. establish relationship
    }
    stateMachine["getFromNode"]=function() {
        var query = [
          'MATCH (n:Meta)',
          'WHERE n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:caseFile["fromName"]
        }
        console.log("trying to find type master for "+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        ndb.cypherQuery(query,params,function(err, status, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log("1-----------")
                console.log(results)
                r=JSON.parse(results)
                if (r.data.length==1) {
                    console.log("2-----------")
                    console.log(JSON.stringify(r.data[0][0]))
                    caseFile["fromNode"]=r.data[0][0]
                    console.log("2..........xxxx..........")
                    console.log(JSON.stringify(caseFile))
                    stateMachine["getToNode"]()
                }
            }
        })
    }
    stateMachine["getToNode"]=function() {
        var query = [
          'MATCH (n:Meta)',
          'WHERE n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:caseFile["toName"]
        }
        console.log("trying to find type master for "+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        ndb.cypherQuery(query,params,function(err, status, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log("3-----------")
                console.log(results)
                r=JSON.parse(results)
                if (r.data.length==1) {
                    console.log("4-----------")
                    console.log(JSON.stringify(r.data[0][0]))
                    caseFile["toNode"]=r.data[0][0]
                    console.log("4..........xxxx..........")
                    console.log(JSON.stringify(caseFile))
                    stateMachine["setLegalRelationship"]()
                }
            }
        })
    }
    stateMachine["setLegalRelationship"]=function() {
        ndb.createRelationship(caseFile["fromNode"]["create_relationship"],caseFile["rel"],caseFile["toNode"]["self"],(function (err, rel) {   
            if (err) {
                console.error('Error creating relationship:', err);
                stateMachine["abend"]()
            } else {
//                console.log('Relationship created:', rel);
                if(_CB_) {
                    _CB_(null,caseFile)
                }
            }
        }))
    }
    //  set the stateMachine running
    stateMachine["Add legal relationship"]()
}

exports["addTypedRelationship"]=function(rel,_CB_) {
    var nodes=[]
    var caseFile={}
    var stateMachine=[]
    stateMachine["abend"]=function(_CB_) {
        console.log("!!ABNORMAL END!!")
        if (_CB_) {
            _CB_(500,caseFile)
        }
    }
    stateMachine["Add typed relationship"]=function (){
        caseFile["fromType"]=rel.fromType
        caseFile["fromName"]=rel.fromName
        caseFile["toType"]=rel.toType
        caseFile["toName"]=rel.toName
        caseFile["rel"]=rel.rel
//set up relationship data here
        console.log(JSON.stringify(caseFile))
        stateMachine["getFromNode"]()
        // 1. get from node
        // 2. get to node
        // 3. establish relationship
    }
    stateMachine["getFromNode"]=function() {
        var query = [
          'MATCH (n:'+caseFile["fromType"]+')',
          'WHERE n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:caseFile["fromName"]
        }
        console.log("trying to find type master for "+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        ndb.cypherQuery(query,params,function(err, status, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log("1-----------")
                console.log(results)
                r=JSON.parse(results)
                if (r.data.length==1) {
                    console.log("2-----------")
                    console.log(JSON.stringify(r.data[0][0]))
                    caseFile["fromNode"]=r.data[0][0]
                    console.log("2..........xxxx..........")
                    console.log(JSON.stringify(caseFile))
                    stateMachine["getToNode"]()
                }
            }
        })
    }
    stateMachine["getToNode"]=function() {
        var query = [
          'MATCH (n:'+caseFile["toType"]+')',
          'WHERE n.name= {name} ',  //'+'"'+type+'"'
          'RETURN n'
        ].join('\n');
        var params = {
            name:caseFile["toName"]
        }
        console.log("trying to find type master for "+params.name+" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        ndb.cypherQuery(query,params,function(err, status, results) {
            if(err) {
                stateMachine['abend']()                
            }
            else {
                console.log("3-----------")
                console.log(results)
                r=JSON.parse(results)
                if (r.data.length==1) {
                    console.log("4-----------")
                    console.log(JSON.stringify(r.data[0][0]))
                    caseFile["toNode"]=r.data[0][0]
                    console.log("4..........xxxx..........")
                    console.log(JSON.stringify(caseFile))
                    stateMachine["setTypedRelationship"]()
                }
            }
        })
    }
    stateMachine["testForLegalRelationship"]=function() {
        var query = [
          'MATCH (n)-[r:'+caseFile["rel"]+']->(m)',
          'WHERE n.type="Types" AND n.name= {fromType} ',  //'+'"'+type+'"'
          'AND m.type="Types" AND m.name= {toType} ',  //'+'"'+type+'"'
          'RETURN r'
        ].join('\n');
        var params = {
            fromType:caseFile["fromType"],
            toType:caseFile["toType"]
        }
        console.log(" using query "+JSON.stringify(query)+":"+JSON.stringify(params))
        ndb.cypherQuery(query,params,function(err, status, results) {
            console.log(JSON.stringify(err),JSON.stringify(results))
            if(err) {
                stateMachine['abend']()                
            }
            else {
                r=JSON.parse(results)
                console.log(r.data[0][0])
                console.log("xxxxxxxxxxxxxxxxxxxx")
                if (results.length==1) {
                    caseFile["legalRelationship"]=results[0].n
                    stateMachine["setTypedRelationship"]()
                }
            }
        })
///!!!!
    }
    stateMachine["setTypedRelationship"]=function() {
        ndb.createRelationship(caseFile["fromNode"]["create_relationship"],caseFile["rel"],caseFile["toNode"]["self"],(function (err, rel) {   
            if (err) {
                console.error('Error creating relationship:', err);
                stateMachine["abend"]()
            } else {
                console.log('Relationship created:', rel);
                if(_CB_) {
                    _CB_(null,caseFile)
                }
            }
        }))
    }
    //  set the stateMachine running
    stateMachine["Add typed relationship"](rel,_CB_)
}

exports["series"]=function series(fList) {
    cases=[]
    var n=require("nodez/nodezv3.js")//    console.log(JSON.stringify(fList))
    if (fList.length>0) {
        head=fList[0]
        tail=fList.slice(1)
        console.log("===================")
        console.log(JSON.stringify(head))
        switch (Object.keys(head)[0]) {
            case "addMetaNode": {
//                console.log(head.addAnyNode.type)
                n.addMetaNode(head.addMetaNode,function(caseFile) {
                    cases.push(caseFile)
                    series(tail)}
                ) 
                break   
            }
            case "addLegalRelationship": {
                n.addLegalRelationship(head.addLegalRelationship.from,head.addLegalRelationship.rel,head.addLegalRelationship.to,head.addLegalRelationship.template,function(caseFile) {
                    cases.push(caseFile)
                    series(tail)}
                )
                break
            }
            case "addTypedNode": {
                n.addTypedNode(head.addTypedNode.type,head.addTypedNode.data,function(caseFile) {
                    cases.push(caseFile)
                    series(tail)}
                )
                break
            }
            case "addTypedRelationship": {
                n.addTypedRelationship(head.addTypedRelationship.fromType,
                        head.addTypedRelationship.fromName,
                        head.addTypedRelationship.rel,
                        head.addTypedRelationship.toType,
                        head.addTypedRelationship.toName,
                        head.addTypedRelationship.rdata,
                        function(caseFile) {
                            cases.push(caseFile)
                            series(tail)
                        }
                )
                break
            }
        }
    }
    else {
        console.log("------FINISHED------")
        console.log(JSON.stringify(cases))
    }
}
