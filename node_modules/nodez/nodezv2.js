var util = require("util")
var events = require("events")

function s4() {
  return Math.floor((1 + Math.random()) * 0x10000)
             .toString(16)
             .substring(1);
}
function guid() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
         s4() + '-' + s4() + s4() + s4();
}

//exports["GeneralNode"] = function(options) {
var EventBasedNodeHandler = function() {
    
    events.EventEmitter.call(this)

    var created = function(body) {
        console.log("============")
        console.log(body)
        console.log("============")
    }
    this.on("NodeCreated",created)
    
    this._CB_createNode=function(error,response,body) {
            if (!error) { 
                switch (response.statusCode) {
                    case 200: {
                        console.log("OK  "+response.statusCode+":"+"options.url"+":Neo4j results="+body)
                        console.log("Emitting 1")
                        this.emit("low")
                        this.emit("NodeCreated",body)
                        console.log("Emitting 2")
                        return body
                        break
                    }  // end HTTP 200
                    default: {
                        console.log("!OK  "+response.statusCode+":"+"options.url"+":Neo4j results="+body)
    //                    res.status(404)
    //                    res.render('error.jade',data={title:"Not found",msg:body})
                        break
                    }
                }
            }
            else {
                console.log("!OK "+response.statusCode+":"+options.url+":Neo4j results="+body)
            }
            
        }
    this.makeNewNode=function(DBROUTE,label,options) {
        var node={}
        node.name="string"
        node.label='string'
        node.uuid = guid()
        node.revision = 1
        node.creationDate = new Date().toISOString()
        node.lastModifiedDate = new Date().toISOString()
        console.log("making ...."+JSON.stringify(options))    
        if (options) {
            for (o in options) {
                node[o]=options[o]
            }
        }
        cypher={
            "query":"create (n:"+label+" { props } ) return n",
            "params": {
                "props": node
            }
        }
        console.log(JSON.stringify(cypher))
        options={
            url:DBROUTE,
            method:"POST",
            headers:{'content-type':'application/json'},
            body:JSON.stringify(cypher)
            }
        console.log("Calling Neo4j broker with:"+options)
        this.emit("hi")
        this.emit("createNode",options)
    }
    
    this.on("createNode",function(options) {
        this.emit("hi")
        var request = require('request');
        request(options,this._CB_createNode)
    })
}

util.inherits(EventBasedNodeHandler,events.EventEmitter)

module.exports = new EventBasedNodeHandler()
