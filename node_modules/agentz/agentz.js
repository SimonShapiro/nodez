function s4() {
  return Math.floor((1 + Math.random()) * 0x10000)
             .toString(16)
             .substring(1);
}
function guid() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
         s4() + '-' + s4() + s4() + s4();
}
// parent constructor
function NodeFactory() {}

//override toString()
NodeFactory.prototype.toString = function () {
		var str=""
		for (i in this) {
			str=str+" "+i+" "+this[i]+" "+" "+Object.prototype.toString.call(this[i])+"\n"
		}
		return str
}
NodeFactory.prototype.toNeo4j = function () {
		var str=""
		for (i in this) {
			switch (Object.prototype.toString.call(this[i])) {
				case "[object String]": {
					str=str+" "+i+" "+this[i]+" "+" "+Object.prototype.toString.call(this[i])+"\n"
					break
				}
				case "[object Number]": {
					str=str+" "+i+" "+this[i]+" "+" "+Object.prototype.toString.call(this[i])+"\n"
					break
				}
			}
		}
		return str
	}
// the static factory method
NodeFactory.build = function (constr) {
    // Throw an error if no constructor for the given automobile
    if (typeof NodeFactory[constr] !== "function") {
        console.log("Can't create "+constr)
        throw {
            name:    "NodeFactoryError",
            message: "You cannot create " + constr + " nodes in this factory"
        };
    }
     
    for (var fn in NodeFactory.prototype) {
      // Here, the method borrowing technique is used to 
      // selectively inherit from the AutoFactory
      console.log('Testing build of:'+fn+"("+Object.prototype.toString.call(NodeFactory[constr].prototype[fn]))
      if (  typeof NodeFactory[constr].prototype[fn] !== "function"
         || NodeFactory[constr].prototype[fn].toString().indexOf('[native code]') > -1 ) {
          NodeFactory[constr].prototype[fn] = NodeFactory.prototype[fn];
      }
    }
    // create a new automobile using the factory
    return new NodeFactory[constr]();
};

// define specifics 

NodeFactory.Cluster = function () {
	this.uuid = guid()
	this.revision = 1
	this.creationDate = new Date().toISOString()
	this.lastModifiedDate = new Date().toISOString()
    this.name = nm
}

GeneralNode = function (label,nm,data) {
	this.label = label
	this.uuid = guid()
	this.revision = "1"
	this.creationDate = new Date().toISOString()
	this.lastModifiedDate = new Date().toISOString()
    this.name = nm
    for (d in data) {
    	this[d]=data[d]
    }
	this.toNeo4j = function () {
		var str=""
		for (i in this) {
			switch (Object.prototype.toString.call(this[i])) {
				case "[object String]": {
					str=str+" "+i+" "+this[i]+" "+" "+Object.prototype.toString.call(this[i])+"\n"
					break
				}
				case "[object Number]": {
					str=str+" "+i+" "+this[i]+" "+" "+Object.prototype.toString.call(this[i])+"\n"
					break
				}
			}
		}
		return str
	}
	this.ExtractNeo4jData = function () {
		var data = {}
		for (i in this) {
			switch (Object.prototype.toString.call(this[i])) {
				case "[object String]": {
					data[i]=this[i]
 					break
				}
				case "[object Number]": {
					data[i]=this[i]
					break
				}
				case "[object Array]": {
					data[i]=this[i]
					break
				}
			}
		}
		return data
	}
	this.setLabel = function(body,label) {
		b=JSON.parse(body)
		console.log("Setting Label as "+label+"-"+b.labels)
		options={ 
			url:b.labels,
			method:"POST",
			headers:{'content-type':'application/json'},
			body:JSON.stringify(label)			}
		console.log("Calling Neo4j broker with:"+JSON.stringify(options))
		var request = require('request');
		var afterSetLabel = function (error, response, body) {
			if (!error && response.statusCode == 204) {
				console.log("OK  "+response.statusCode+":"+options.url+":Neo4j results="+body)
		  	}
		  	else {
				console.log("!OK "+response.statusCode+":"+options.url+":Neo4j results="+body)
		  	}
	//			callBack(response.statusCode,body)
		}
		request(options,afterSetLabel)
	}	
	this.save = function(d) {
		var DBROUTE="http://localhost:7474/db/data/"
		options={ 
			url:DBROUTE+'node',
			method:"POST",
			headers:{'content-type':'application/json'},
			body:JSON.stringify(d.ExtractNeo4jData())
			}
		console.log("Calling Neo4j broker with:"+JSON.stringify(options))
		var request = require('request');
		var afterPosting = function (error, response, body) {
			if (!error && response.statusCode == 201) {
				console.log("OK  "+response.statusCode+":"+options.url+":Neo4j results="+body)
				d.setLabel(body,d.label)
		  	}
		  	else {
				console.log("!OK "+response.statusCode+":"+options.url+":Neo4j results="+body)
		  	}
	//			callBack(response.statusCode,body)
		}
		request(options,afterPosting)
	}
	this.cypherSave = function(d) {
		var DBROUTE="http://localhost:7474/db/data/cypher/"
//		cypher=""
//		cypher=cypher+'{ 'query' : 'create (n:"+d.ExtractNeo4jData().label+" { props } ) return n ',"
//		cypher=cypher+"'params': { 'props' :  "+JSON.stringify(d.ExtractNeo4jData())+" } }"
		cypher={
			"query":"create (n:"+d.ExtractNeo4jData().label+" { props } ) return n",
			"params": {
				"props": d.ExtractNeo4jData()
			}
		}
		console.log(JSON.stringify(cypher))
		options={
			url:DBROUTE,
			method:"POST",
			headers:{'content-type':'application/json'},
			body:JSON.stringify(cypher)
			}
		console.log("Calling Neo4j broker with:"+options)
		var request = require('request');
		var afterPosting = function (error, response, body) {
			if (!error && response.statusCode == 200) {
				console.log("OK  "+response.statusCode+":"+options.url+":Neo4j results="+body)
		  	}
		  	else {
				console.log("!OK "+response.statusCode+":"+options.url+":Neo4j results="+body)
		  	}
	//			callBack(response.statusCode,body)
		}
		request(options,afterPosting)
	}	
}

NodeFactory.GeneralNode = function (label,nm,data) {
	this.label = label
	this.uuid = guid()
	this.rev = 1
	this.creationDate = new Date().toISOString()
	this.lastModifiedDate = new Date().toISOString()
    this.name = nm
    for (d in data) {
    	this[d]=data[d]
    }
}

exports.NodeFactory = NodeFactory
exports.GeneralNode = GeneralNode